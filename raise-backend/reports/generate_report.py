from fpdf import FPDF
import datetime

def safe_text(text):
    """Remove unsupported Unicode characters for FPDF"""
    return text.encode("latin-1", "replace").decode("latin-1")

def create_pdf_report(results, analysis, username="User", output_path="handwriting_report.pdf"):
    pdf = FPDF()
    pdf.add_page()

    # Header
    pdf.set_font("Arial", "B", 16)
    pdf.cell(200, 10, txt=safe_text("Handwriting Analysis Report"), ln=True, align='C')

    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt=safe_text(f"User: {username}"), ln=True)
    pdf.cell(200, 10, txt=f"Date: {datetime.datetime.now().strftime('%Y-%m-%d')}", ln=True)
    pdf.ln(5)

    # Total Characters
    pdf.set_font("Arial", "B", 12)
    pdf.cell(200, 10, txt=safe_text(f"Total Characters Detected: {analysis['total_detected']}"), ln=True)

    # Character Counts
    pdf.set_font("Arial", "B", 12)
    pdf.cell(200, 10, txt=safe_text("Character Breakdown:"), ln=True)
    pdf.set_font("Arial", size=11)
    for label, count in analysis["label_counts"].items():
        line = f"- {label}: {count}"
        pdf.cell(200, 8, txt=safe_text(line), ln=True)

    # Insights
    pdf.ln(5)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(200, 10, txt=safe_text("Key Insights:"), ln=True)
    pdf.set_font("Arial", size=11)

    confused = analysis.get("confused_characters", [])
    if confused:
        joined = ", ".join(confused)
        pdf.multi_cell(0, 8, txt=safe_text(f"• Confusion detected in characters: {joined}"))
    else:
        pdf.multi_cell(0, 8, txt=safe_text("• No major confusion in character recognition."))

    if analysis.get("only_number_confusion"):
        pdf.multi_cell(0, 8, txt=safe_text("• Confusion is isolated to numeric characters only."))

    # Footer
    pdf.ln(10)
    pdf.set_font("Arial", "I", 10)
    pdf.set_text_color(120, 120, 120)
    pdf.cell(200, 10, txt=safe_text("Generated by RAISE-AI Handwriting Analysis Engine"), ln=True, align='C')

    pdf.output(output_path)
    return output_path
